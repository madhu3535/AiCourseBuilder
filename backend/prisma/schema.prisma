generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  passwordHash     String?
  subscriptionTier String   @default("FREE")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  courses      Course[]
  enrollments  Enrollment[]

  @@map("users")
}

model Course {
  id              String   @id @default(cuid())
  title           String
  description     String?
  difficulty      String   @default("Beginner")
  duration        String?
  category        String?
  thumbnail       String?
  status          String   @default("DRAFT")
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  instructorId    String

  // Relations
  instructor   User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules      Module[]
  enrollments  Enrollment[]

  @@map("courses")
}

model Module {
  id         String   @id @default(cuid())
  title      String
  orderIndex Int
  duration   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  courseId   String

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id         String   @id @default(cuid())
  title      String
  content    String
  orderIndex Int
  duration   String?
  youtubeUrl String?
  startTime  Int?
  endTime    Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  moduleId   String

  // Relations
  module  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  quizzes Quiz[]

  @@map("lessons")
}

model Quiz {
  id       String @id @default(cuid())
  title    String
  lessonId String

  // Relations
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("quizzes")
}

model Question {
  id            String   @id @default(cuid())
  question      String
  type          String   // "multiple-choice" or "true-false"
  options       String[] // JSON array for multiple choice
  correctAnswer String   // JSON for answer
  explanation   String?
  quizId        String

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Enrollment {
  id       String @id @default(cuid())
  userId   String
  courseId String
  enrolledAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}
